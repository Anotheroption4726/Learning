_FILESYSTEMS___________________________________________________________________________________________________________________




Sur chaque partition, les fichiers sont organisés selon ce qu'on appelle un système de fichiers. C'est en quelque sorte une 
façon d'organiser les fichiers : ils sont tous référencés dans une sorte d'annuaire gigantesque.

Le système de fichiers permet aussi de dire qui a le droit de voir tel ou tel fichier. D'autre part, les systèmes de fichiers 
récents sont dits « journalisés », c'est-à-dire qu'en cas de crash (votre PC est éteint brusquement), le système est capable 
de retrouver ses fichiers sans trop de problèmes.

Règle importante : il ne peut y avoir qu'un seul système de fichiers par partition.




	>> Microsoft (DOS et Windows)

		- FAT 16 :
			Un très vieux système de fichiers, capable de gérer jusqu'à 4 Go de données. Il est donc impossible de faire une 
			partition en FAT 16 de plus de 4 Go. Très utilisé à l'époque du DOS et aux débuts de Windows 95

		- FAT 32 : 
			Une évolution du FAT 16, qui pousse la limite de taille à 2 To (2 000 Go). Le FAT 16 et le FAT 32 ont la particularité 
			de beaucoup fragmenter les fichiers, d'où la nécessité de défragmenter régulièrement

		- NTFS : 
			Apparu avec Windows NT, puis réutilisé par Windows XP, il permet de créer des partitions d'une taille allant jusqu'à 
			16 Eo (16 Exaoctets, soit 16 000 000 000 de Gigaoctets). Contrairement au FAT 32, c'est un système de fichiers 
			journalisé qui récupère beaucoup mieux les données en cas de crash du disque. D'autre part, on peut donner des droits 
			sur certains fichiers, les crypter, les compresser, etc. Enfin, les fichiers sont censés moins se fragmenter




	>> Linux

		- ext2 : 
			Longtemps été utilisé sous Linux. Il a été développé par un français (Rémy Card) et présente la particularité de très 
			peu se fragmenter. Ainsi, sous Linux et depuis longtemps, il n'y a pas besoin de faire de défragmentation

		- ext3 :
			Très proche de l'ext2, à une différence majeure près: la journalisation. En effet, ext2 n'était pas journalisé et en 
			cas de crash du disque, on risquait plus facilement une perte de données. L'ext2 et l'ext3 sont parfaitement 
			compatibles entre eux, dans un sens comme dans l'autre

		- ext4 :
			Une amélioration de l'ext3, relativement récente, qui améliore la prise en charge des gros disques durs et diminue les 
			problèmes de fragmentation des fichiers








_SHELL, TERMINAL & CONSOLE_____________________________________________________________________________________________________




	>> SHELL

		https://doc.ubuntu-fr.org/tutoriel/script_shell

		In Unix system administration, a user's shell is the program which actually processes commands and returns output. Most 
		shells also manage foreground and background processes, command history and command line editing. These features (and 
		many more) are standard in Bash, the most common shell in modern Linux systems. There are many different unix shells. 
		Ubuntu's default shell is Bash (like most other Linux distributions). Popular alternatives include zsh (which 
		emphasizes power and customizability) and fish (which emphasizes simplicity)

		Voici les noms de quelques-uns des principaux shells qui existent:

			- sh :
				Bourne Shell. L'ancêtre de tous les shells

			- bash :
				Bourne Again Shell. Une amélioration du Bourne Shell, disponible par défaut sous Linux et Mac OS X

			- ksh :
				Korn Shell. Un shell puissant assez présent sur les Unix propriétaires, mais aussi disponible en version libre, compatible avec bash

			- csh :
				C Shell. Un shell utilisant une syntaxe proche du langage C

			- tcsh :
				Tenex C Shell. Amélioration du C Shell

			- zsh :
				Z Shell. Shell assez récent reprenant les meilleures idées de bash, ksh et tcsh




	>> TERMINAL

		A terminal refers to a wrapper program which runs a shell. Decades ago, this was a physical device consisting of little 
		more than a monitor and keyboard. As Unix/Linux systems added better multiprocessing and windowing systems, this 
		terminal concept was abstracted into software. Some terminals are provided by the kernel but other terminals, sometimes 
		called pseudo-terminals or pseudo-ttys, are provided by programs called terminal emulators. These include:

			- GUI applications running in the X Window System :
				Xterm, Gnome Terminal, Konsole, Terminator, etc.

			- Ssh :
				Which connects a terminal on one machine with programs on another machine

			- Expect :
				For scripting terminal interactions




	>> CONSOLE

		A console is generally a terminal in the physical sense that is by some definition the primary terminal directly 
		connected to a machine. The console appears to the operating system as a kernel-implemented terminal. On some systems, 
		such as Linux and FreeBSD, the console appears as several terminals (ttys, with special key combinations to switch 
		between them: "Ctrl + Alt + F1", "Ctrl + Alt + F2"...). Just to confuse matters, the name given to each particular 
		terminal can be “console”, ”virtual console”, ”virtual terminal”, and other variations








_W_____________________________________________________________________________________________________________________________



	a0		 a1		   a2		 			   a3	 a4    a5

	23:24:12 up 5 min, 2 users,  load average: 0,19, 0,63, 0,46


	b0		b1		b2			b3		 b4	    b5      b6	   b7

	USER 	TTY 	FROM  		LOGIN@	 IDLE   JCPU	PCPU   WHAT
	user 	tty1	-			23:30	 2:22   0.08s   0.04s  -bash
	user_2	tty7	:0			23:27	 10:47  5.55s	0.35s  cinnamon-session --session cinnamon2d




	a0 :
		L'heure courante

	a1 :
		Durée de fonctionnement total de l'ordinateur depuis qu'il a été mis en marche

	a2 :
		Nombre de sessions utilisateur connectées à l'ordinnateur sur le moment présent

	a3 :
		Charge moyenne du processeur depuis 1 minute (valeur entre 0 et 1 pour single-core, 0 et 2 pour dual-core, 0 et 4 pour 
		quad-core, etc...)

	a4 :
		Charge moyenne du processeur depuis 5 minutes (valeur entre 0 et 1 pour single-core, 0 et 2 pour dual-core, 0 et 4 pour 
		quad-core, etc...)

	a5 :
		Charge moyenne du processeur depuis 15 minutes (valeur entre 0 et 1 pour single-core, 0 et 2 pour dual-core, 0 et 4 
		pour quad-core, etc...)


	b0 - USER :
		Nom de l'utilisateur (son login)

	b1 - TTY :
		Nom de la console dans laquelle se trouve l'utilisateur

	b2 - FROM :
		L'adresse IP (ou nom d'hôte) depuis laquelle l'utilisateur se connecte

	b3 - LOGIN@ :
		L'heure à laquelle l'utilisateur s'est connecté

	b4 - IDLE :
		Depuis combien de temps cet utilisateur est inactif

	b5 - JCPU :
		Charge moyenne de tous les processus attachés au tty de l'utilisateur

	b6 - PCPU :
		Charge du processus courant affiché dans la section "WHAT"

	b7 - WHAT :
		La commande que l'utilisateur est en train d'exécuter en ce moment








_PS -EF________________________________________________________________________________________________________________________




	>> LIENS


		http://linuxcommand.org/lc3_man_pages/ps1.html
		https://shapeshed.com/unix-ps/
		https://www.win.tue.nl/~aeb/linux/lk/lk-10.html




	0			 1	   2	 3	4	  5		   6		7

	UID			 PID   PPID  C  STIME TTY 		   TIME CMD
	root           1      0  0  01:01 ?        00:00:01 /sbin/init
	root           2      1  0  01:01 ?        00:00:00 [migration/0]
	root           3      1  0  01:01 ?        00:00:00 [ksoftirqd/0]
	root           4      1	 0  01:01 ?        00:00:00 [watchdog/0]
	root           5      1  0  01:01 ?        00:00:00 [events/0]
	root           6      1  0  01:01 ?        00:00:00 [khelper]
	root           7      1  0  01:01 ?        00:00:00 [kthread]
	root          30      7  0  01:01 ?        00:00:00 [kblockd/0]
	root        2462      1  0  01:01 ?        00:00:00 /sbin/udevd --daemon
	root        3292      7  0  01:01 ?        00:00:00 [kpsmoused]
	root        3448      7  0  01:01 ?        00:00:00 [kgameportd]
	root        4021      1  0  01:02 tty4     00:00:00 /sbin/getty 38400 tty4
	root        4022      1  0  01:02 tty5     00:00:00 /sbin/getty 38400 tty5
	root        4024      1  0  01:02 tty2     00:00:00 /sbin/getty 38400 tty2
	root        4027      1  0  01:02 tty3     00:00:00 /sbin/getty 38400 tty3
	root        4030      1  0  01:02 tty1     00:00:00 /sbin/getty 38400 tty1
	root        4040      1  0  01:02 tty6     00:00:00 /sbin/getty 38400 tty6
	root        4266      1  0  01:02 ?        00:00:00 /usr/sbin/acpid -c /etc/acpi/eve 
	root        4363      1  0  01:02 ?        00:00:00 /sbin/syslogd
	root        4417      1  0  01:02 ?        00:00:00 /bin/dd bs 1 if /proc/kmsg of /v
	klog        4419      1  0  01:02 ?        00:00:00 /sbin/klogd  -P /var/run/klogd/km
	103         4440      1  0  01:02 ?        00:00:00 /usr/bin/dbus-daemon --system
	107         4456      1  0  01:02 ?        00:00:03 /usr/sbin/hald




	0 - UID :
		Nom de l'utilisateur (son login) qui a lancé la commande (ou programme)

	1 - PID :
		Numéro d'identification du processus. Chaque processus (programme lancé) a un numéro unique qui permet de l'identifier. 
		Un daemon est un processus système qui tourne en arrière-plan

	2 - PPID :
		PID du processus parent. En plus d'un PID unique, chaque processus se voit attribuer un PID de processus parent (PPID) 
		qui indique quel processus l'a démarré

	3 - C :
		Utilisation (en pourcentage) du processeur

	4 - STIME :
		"Start Time". Date ou heure à laquelle le processus a démarré

	5 - TTY :
		Nom de la console depuis laquelle a été lancé le processus

	6 - TIME :
		Durée d'exécution du processus. Correspond à la durée pendant laquelle le processus a occupé le processeur depuis son 
		lancement

	7 - CMD :
		La commande (ou programme) qui a généré le processus. Si il y a plusieurs fois le même programme, c'est que celui-ci 
		s'est dupliqué en plusieurs processus




	>> INIT


		"init" est un processus très important. C'est le grand-père de tous les processus car tous les processus s'exécutent 
		sous celui-ci. Chaque processus peut être retracé jusqu'à "init", et son PID sera toujours égal à 1. Le kernel a 
		lui-même a un PID de 0.








_CHMOD_________________________________________________________________________________________________________________________




	u - user 		(propriétaire du fichier aka l'utilisateur qui l'a créé)
	g - group
	o - other 		(n'importe qui)




	4 - read (r)
	2 - write (w)
	1 - execute (x)
	0 - no permissions (-)








_LS -L_________________________________________________________________________________________________________________________




	0 1  2  3   4 5              6           7  8			  9			   10

	d rwxr-xr-x 2 nomUtilisateur nomDuGroupe 96 janv. 1 16:57 nomDuDossier
	- rw-rwxr-- 1 nomUtilisateur nomDuGroupe 59 janv. 2 18:42 nomDuFichier -> /usr/share/example-content

	


	- 0 :
		Type. "d" indique qu'il s'agit d'un dossier. "-" indique qu'il ne s'agit pas d'un dossier. "l" indique qu'il s'agit d'un 
		raccourci


	- 1 :
		Droits de lecture (r), d'écriture (w) et d'execution (x) pour le propriétaire (u) du fichier/dossier (aka 
		l'utilisateur qui l'a créé). Ici il s'agit de "nomUtilisateur"


	- 2 :
		Droits de lecture (r), d'écriture (w) et d'execution (x) pour le groupe (g) associé au fichier/dossier
		Ici il s'agit de "nomDuGroupe"


	- 3 :
		Droits de lecture (r), d'écriture (w) et d'execution (x) pour n'importe qui d'autre (o)


	- 4 :
		Nombre de liens physiques (dans le cas d'un fichier). Sinon nombre de liens physiques contenus dans le dossier?


	- 5 :
		Nom de l'utilisateur propriétaire du fichier (celui qui l'a créé)


	- 6 :
		Groupe auquel appartient le fichier. Il se peut que le nom du groupe soit le même que celui du propriétaire


	- 7 :
		Taille du fichier en octets


	- 8 :
		Date et heure de la dernière modification


	- 9 :
		Nom du fichier ou du dossier


	- 10 :
		Dans le cas d'un raccourci (lien symbolique), cette partie précise vers où le fichier pointe








_IFCONFIG_________________________________________________________________________________________________________________________




	eth0	Link encap:Ethernet  HWaddr 00:90:f5:56:44:5a  
        	UP BROADCAST MULTICAST  MTU:1500  Metric:1
        	Packets reçus:0 erreurs:0 :0 overruns:0 frame:0
        	TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
        	collisions:0 lg file transmission:1000 
        	Octets reçus:0 (0.0 B) Octets transmis:0 (0.0 B)
        	Interruption:220 Adresse de base:0xe000 

	lo		Link encap:Boucle locale  
          	inet adr:127.0.0.1  Masque:255.0.0.0
          	adr inet6: ::1/128 Scope:Hôte
          	UP LOOPBACK RUNNING  MTU:16436  Metric:1
          	Packets reçus:10 erreurs:0 :0 overruns:0 frame:0
          	TX packets:10 errors:0 dropped:0 overruns:0 carrier:0
          	collisions:0 lg file transmission:0 
          	Octets reçus:500 (500.0 B) Octets transmis:500 (500.0 B)

	wlan0	Link encap:Ethernet  HWaddr 00:19:d2:61:90:0a  
        	inet adr:192.168.1.2  Bcast:192.168.1.255  Masque:255.255.255.0
        	adr inet6: fe80::219:d2ff:fe61:900a/64 Scope:Lien
        	UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
        	Packets reçus:5238 erreurs:0 :0 overruns:0 frame:0
        	TX packets:4899 errors:0 dropped:0 overruns:0 carrier:0
        	collisions:0 lg file transmission:1000 
        	Octets reçus:5069449 (5.0 MB) Octets transmis:1202459 (1.2 MB)




    >> eth0 :
    	Correspond à la connexion par câble réseau (en général appellé câble RJ45). Certains ordinateurs (notamment les 
    	serveurs) ont plusieurs sorties réseau filaires. Dans ce cas, il devrait y avoir aussi des interfaces eth1, eth2, etc.


    >> lo :
    	Boucle locale. Interface présente sur tous les systèmes. Correspond à une connexion à soi-même.


    >> wlan0 :
    	Connexion sans-fil type Wi-Fi. Là encore, s'il y a plusieures cartes réseau sans fil, il devrait y avoir aussi un 
    	wlan1, wlan2, etc.








_REGULAR EXPRESSIONS/REGEX_____________________________________________________________________________________________________




	>> LIENS


		https://www.regexpal.com/

		- Tutos :
			https://www.guru99.com/linux-regular-expressions.html
			https://www.geeksforgeeks.org/grep-command-in-unixlinux/
			https://www.cyberciti.biz/faq/grep-regular-expressions/
			https://www.cyberciti.biz/faq/howto-use-grep-command-in-linux-unix/
			https://openclassrooms.com/fr/courses/918836-concevez-votre-site-web-avec-php-et-mysql/917386-les-expressions-regulieres-partie-2-2

		- Exemples :
			https://digitalfortress.tech/tricks/top-15-commonly-used-regex/
			https://doc.laserfiche.com/laserfiche.documentation/english/docs/Subsystems/ProcessAutomation/Content/Resources/Regular%20Expressions/Common-Regular-Expressions.htm
			https://gist.github.com/jacksonfdam/3000275




	>> TYPES


		POSIX


		PCRE




	>> OPERATEURS


		^ :
			Indique le début d'une chaîne

		$ :
			Indique la fin d'une chaîne

		[] :
			Classe de caractères. N'importe laquelle des lettres (contenues à l'intérieur de la classe) peut convenir

		[-] :
			Classe. Fait une recherche à l'intérieur toute une plage/intervalle de caractères ([a-t], [F-M], [3-8]...). Ici pas 
			besoin d'utiliser l'antislash "\" si l'on souhaite utiliser des métacaractères (sauf pour "#" et "]"). Pour 
			chercher un "-", il faut introduire l'élément en début ou en fin de classe par contre

		[^-] :
			Fait une recherche à l'extérieur d'une plage/intervalle de caractères (l'inverse de [-])

		? :
			Indique que le caractère ou tout caractère présent dans la suite de caractères précédant l'opérateur peut y être 0 
			ou 1 fois

		+ :
			Indique que le caractère ou tout caractère présent dans la suite de caractères précédant l'opérateur doit y être 1 
			ou plusieures fois

		* :
			Indique que le caractère ou tout caractère présent dans la suite de caractères précédant l'opérateur peut y être 0,
			1 ou plusieures fois

		() :
			Permet de grouper des caractères en groupes lorsqu'on utilise un opérateur de type "?", "+" ou "*". L'opérateur 
			agit donc sur la suite de caractères situés entre parenthèses et non sur chaque caractère individuellement

		{} :
			Fonctionne comme "+" sauf qu'on détermine entre les accolades la quantité de fois qu'on veut que le ou les 
			caractères soient respectés

		{,} :
			Fonctionne comme "{}" sauf qu'on peut choisir plusieures options de quantité séparées par un ","
				"?" revient à écrire {0,1}
				"+" revient à écrire {1,}
				"*" revient à écrire {0,}

		\ :
			Insertion de métacaractère # ! ^ $ ( ) [ ] { } ? + * . \ | dans la regex




	>> RACCOURCIS


		Il s'agit de lettres normales, mais quand on place un antislash "\" devant, signification spéciale leur est donnée


		\d :
			Indique un chiffre. Revient exactement à taper [0-9]

		\D :
			Indique ce qui n'est PAS un chiffre. Revient à taper [^0-9]

		\w :
			Indique un caractère alphanumérique ou un tiret de soulignement. Correspond à [a-zA-Z0-9_]

		\W :
			Indique ce qui n'est PAS un mot. Revient à taper [^a-zA-Z0-9_]

		\t :
			Indique une tabulation

		\n :
			Indique une nouvelle ligne

		\r :
			Indique un retour chariot

		\s :
			Indique un espace blanc

		\S :
			Indique ce qui n'est PAS un espace blanc ( \t \n \r )

		. :
			Indique n'importe quel caractère. Autorise tout	sauf les entrées ( \n )	




	>> EXEMPLES


		^Bonjour :
			Si l'on souhaite qu'une chaîne commence par "Bonjour". Attention, "Bonjour" devra obligatoirement se trouver au
			début de la chaîne

		zéro$ :
			Si l'on souhaite que la chaîne se termine par "zéro"

		gr[ioa]s :
			Regex qui reconnaît trois mots : "gris", "gros" et "gras"

		gr[aoi]s$ :
			 La chaîne de caractères doit se terminer par "gris", "gras" ou "gros"

		^[aeiouy] :
			La chaîne de caractères doit commencer par une voyelle minuscule

		[a-z] :
			La chaîne de caractères doit contenir une lettre

		[A-Z0-9] :
			La chaîne de caractères doit contenir une lettre majuscule et un chiffre compris entre 0 et 9

		^[0-9] :
			La chaîne de caractères doit commencer avec un chiffre compris entre 0 et 9

		<h[1-6]> :
			La chaîne de caractères doit contenir une balise de titre HTML

		[^0-9] :
			La chaîne de caractères doit contenir autre chose que des chiffres

		[^A-Z0-9] :
			La chaîne de caractères doit contenir autre chose que des majuscules et des chiffres

		^[^a-z] :
			La chaîne de caractères ne doit pas commencer pas par une lettre minuscule

		[^aeiouy]$ :
			La chaîne de caractères ne doit pas se terminer pas par une voyelle

		a? :
			La chaîne de caractères doit contenir 0 ou 1 "a"

		a+ :
			La chaîne de caractères doit contenir 1 ou plusieurs fois "a"

		a* :
			La chaîne de caractères peut contenir 0, 1 ou plusieurs fois "a"

		chiens? :
			La chaîne de caractères peut contenir "chien", "chiens" ou encore toute lettre contenue dans la regex (mais la ou 
			les lettres ne peuvent pas être présentes plus d'une fois)

		bor?is :
			La chaîne de caractères peut contenir "boris", "bois" ou encore toute lettre contenue dans la regex avant "is"

		Ay(ay)* :
			La regex reconnaîtra "Ay", "Ayay", "Ayayay" ou "Ayayayay" par exemple

		Ay(ay|oy)* :
			La regex reconnaîtra "Ay", "Ayay", "Ayayay", "Ayayayay" ou Ayayayoyayayayoyoyoyoyayoy par exemple

		^Yaho+$ :
			La regex reconnaitra "Yahoooooo" mais pas "Yahoooooo c'est génial !" par exemple

		^Bla(bla)* :
			La regex reconnaitra "Bla", "Blabla", "Blablabla", etc...

		a{3} :
			La regex doit contenir "aaa"

		a{3,5} :
			La regex doit contenir "aaa", "aaaa" ou "aaaaa"

		a{3,} :
			La regex doit contenir "aaa", "aaaa", "aaaaa", "aaaaaa", etc...

		^Bla(bla){4}$ :
			La regex doit commencer par "Bla" puis finir avec une suite de 4 "bla"

		^[0-9]{6}$ :
			La regex doit commencer et finir par une suite de 6 chiffres allant de 0 à 9

		impatient \! :
			La chaîne de caractères doit contenir "impatient !"

		\(très\) fatigué :
			La chaîne de caractères doit contenir "(très) fatigué"

		sommeil\.\.\. :
			La chaîne de caractères doit contenir "sommeil…"

		:-\\ :
			La chaîne de caractères doit contenir ":-\"




	>> COMMON USES


		^\d+$ :
			Nombres entiers

		^\d*\.\d+$ :
			Nombres décimaux

		^\d*(\.\d+)?$ :
			Nombres entiers et décimaux

		^-?\d*(\.\d+)?$ :
			Nombres négatifs, positifs, entiers et décimaux

		^[a-zA-Z0-9]*$ :
			Caractères alphanumériques

		^[a-zA-Z0-9 ]*$ :
			Caractères alphanumériques avec espaces

		^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6})*$ :
			Emails

		^([a-z0-9_\.\+-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$ :
			Emails (version moins commune)

		(?=(.*[0-9]))((?=.*[A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z]))^.{8,}$ :
			Mot de passe (1 lettre minuscule, 1 lettre majuscule, 1 nombre et doit avoir au moins 8 caractères au total)

		(?=(.*[0-9]))(?=.*[\!@#$%^&*()\\[\]{}\-_+=~`|:;"'<>,./?])(?=.*[a-z])(?=(.*[A-Z]))(?=(.*)).{8,} :
			Mot de passe complexe (1 lettre minuscule, 1 lettre majuscule, 1 nombre, 1 caractère spécial et doit avoir au 
			moins 8 caractères au total)

		https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#()?&//=]*) :
			URL http(s)

		([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])) :
			Date au format 'YYYY-MM-dd'

		^(0?[1-9]|1[0-2]):[0-5][0-9]$ :
			Heure au format HH:MM (12)

		^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$ :
			Heure au format HH:MM (24)

		^(?:(?:\(?(?:00|\+)([1-4]\d\d|[1-9]\d?)\)?)?[\-\.\ \\\/]?)?((?:\(?\d{1,}\)?[\-\.\ \\\/]?){0,})(?:[\-\.\ \\\/]?(?:#|ext\.?|extension|x)[\-\.\ \\\/]?(\d+))?$ :
			Numéro de téléphone international (avec country code en option)

		^0[1-9][0-9]{8} :
			Numéro de téléphone français

		0[1-9]([-. ]?[0-9]{2}){4} :
			Numéro de téléphone français mais la regex est plus permissible (accepte les espaces, tirets, etc...)








_SSH___________________________________________________________________________________________________________________________




	>> TELNET




	>> CHIFFREMENTS


		- Symétrique :

		- Asymétrique :
			RSA
			DSA








_CRONTAB_______________________________________________________________________________________________________________________




					0 1  2	 3	 4	   5

					m h  dom mon dow   command
	Exemple 1		5 15 * 	 * 	 * 	   touch /home/mateo21/fichier.txt
	Exemple 2		4 *  *   *   * 	   commande
	Exemple 3		0 0  *   *   1 	   commande
	Exemple 4		0 4  1   *   * 	   commande
	Exemple 5		0 4  *   12  * 	   commande
	Exemple 6		0 *  4   12  * 	   commande
	Exemple 7		* *  *   *   * 	   commande




	- 0 :
		Minutes (0 - 59)

	- 1 :
		Heures (0 - 23)

	- 2 :
		Day of month/jour du mois (1 - 31)

	- 3 :
		Mois (1 - 12)

	- 4 :
		Day of week/jour de la semaine (0 - 6, 0 étant le dimanche)

	- 5 :
		Commande à exécuter




	- Exemple 1 :
		Un fichier "fichier.txt" est créé tous les jours à 15 h 05 dans le répertoire "/home/mateo21/"

	- Exemple 2 :
		Toutes les heures à 4 minutes (00 h 04, 01 h 04, 02 h 04, etc.)

	- Exemple 3 :
		Tous les lundis à minuit (dans la nuit de dimanche à lundi)

	- Exemple 4 :
		Tous les premiers du mois à 4 h du matin

	- Exemple 5 :
		Tous les jours du mois de décembre à 4 h du matin

	- Exemple 6 :
		Toutes les heures les 4 décembre

	- Exemple 7 :
		Toutes les minutes




	>> NOTATIONS


		- 5 (un seul nombre) :
			Exécuté lorsque le champ prend la valeur 5

		- * :
			Exécuté tout le temps (toutes les valeurs sont bonnes) ;

		- 3,5,10 :
			Exécuté lorsque le champ prend la valeur 3, 5 ou 10. Ne pas mettre d'espace après la virgule ;

		- 3-7 :
			Exécuté pour les valeurs 3 à 7 ;

		- */3 :
			Exécuté tous les multiples de 3 (par exemple à 0 h, 3 h, 6 h, 9 h…)




	>> EXEMPLES DE NOTATIONS


		- 30 5 1-15 * * commande :
			Exécuté à 5 h 30 du matin du 1er au 15 de chaque mois

		- 0 0 * * 1,3,4 commande :
			Exécuté à minuit le lundi, le mercredi et le jeudi

		- 0 */2 * * * commande :
			Exécuté toutes les 2 heures (00 h 00, 02 h 00, 04 h 00…)

		- */10 * * * 1-5 commande :
			Exécuté toutes les 10 minutes du lundi au vendredi




	ATTENTION: Si la commande programmée renvoie une information ou une erreur, elle n'apparaîtra pas dans la console. Le 
	résultat de la commande est envoyé par e-mail à l'utilisateur qui a programmé la crontab. Chaque utilisateur possède sa 
	propre boîte e-mail sur les machines de type Unix. Il est toutefois toujours possible de rediriger les sorties d'erreurs 
	des commandes vers un fichier grace à un flux de redirection classique ("/home/mateo21/cron.log 2>&1" par exemple)








_/ETC/APT/SOURCES.LIST_________________________________________________________________________________________________________




	0		1								  2				 3
	deb 	http://security.ubuntu.com/ubuntu hardy-security main restricted
	deb-src http://security.ubuntu.com/ubuntu hardy-security main restricted




	0 :
		"deb" indique que l'adresse sert à télécharger la version compilée (binaire) des programmes. "deb-src" permet de 
		récupérer leur code source


	1 :
		Adresse du dépôt


	2 :
		Nom de la version de la distribution utilisée (ici Ubuntu)


	3 :
		Section du dépôt. Les sections "main" (paquets tout à fait libres) et "restricted" (paquets non-libres) contiennent des 
		paquets maintenus par les développeurs d'Ubuntu. Les sections "universe" et "multiverse" contiennent des paquets 
		maintenus par la communauté. La section "universe" contient uniquement des paquets libres et la section "multiverse", 
		des paquets non-libres. La Fondation Ubuntu ne contrôle pas ces paquets ; ils sont analysés par un comité 
		d'utilisateurs.